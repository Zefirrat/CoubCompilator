// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CoubResult;
//
//    var welcome = Welcome.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CoubCompilator.CoubClasses
{
    public partial class Welcome
    {
        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("per_page")]
        public long PerPage { get; set; }

        [JsonProperty("total_pages")]
        public long TotalPages { get; set; }

        [JsonProperty("next")]
        public long Next { get; set; }

        [JsonProperty("coubs")]
        public List<Coub> Coubs { get; set; }
    }

    public partial class Coub
    {
        [JsonProperty("flag")]
        public object Flag { get; set; }

        [JsonProperty("abuses")]
        public object Abuses { get; set; }

        [JsonProperty("recoubs_by_users_channels")]
        public object RecoubsByUsersChannels { get; set; }

        [JsonProperty("favourite")]
        public bool Favourite { get; set; }

        [JsonProperty("promoted_id")]
        public object PromotedId { get; set; }

        [JsonProperty("recoub")]
        public object Recoub { get; set; }

        [JsonProperty("like")]
        public object Like { get; set; }

        [JsonProperty("dislike")]
        public object Dislike { get; set; }

        [JsonProperty("in_my_best2015")]
        public bool InMyBest2015 { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("visibility_type")]
        public VisibilityType VisibilityType { get; set; }

        [JsonProperty("original_visibility_type")]
        public VisibilityType OriginalVisibilityType { get; set; }

        [JsonProperty("channel_id")]
        public long ChannelId { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("is_done")]
        public bool IsDone { get; set; }

        [JsonProperty("views_count")]
        public long ViewsCount { get; set; }

        [JsonProperty("cotd")]
        public object Cotd { get; set; }

        [JsonProperty("cotd_at")]
        public object CotdAt { get; set; }

        [JsonProperty("visible_on_explore_root")]
        public bool VisibleOnExploreRoot { get; set; }

        [JsonProperty("visible_on_explore")]
        public bool VisibleOnExplore { get; set; }

        [JsonProperty("featured")]
        public bool Featured { get; set; }

        [JsonProperty("published")]
        public bool Published { get; set; }

        [JsonProperty("published_at")]
        public DateTimeOffset PublishedAt { get; set; }

        [JsonProperty("reversed")]
        public bool Reversed { get; set; }

        [JsonProperty("from_editor_v2")]
        public bool FromEditorV2 { get; set; }

        [JsonProperty("is_editable")]
        public bool IsEditable { get; set; }

        [JsonProperty("original_sound")]
        public bool OriginalSound { get; set; }

        [JsonProperty("has_sound")]
        public bool HasSound { get; set; }

        [JsonProperty("recoub_to")]
        public object RecoubTo { get; set; }

        [JsonProperty("file_versions")]
        public FileVersions FileVersions { get; set; }

        [JsonProperty("audio_versions")]
        public AudioVersions AudioVersions { get; set; }

        [JsonProperty("image_versions")]
        public Versions ImageVersions { get; set; }

        [JsonProperty("first_frame_versions")]
        public Versions FirstFrameVersions { get; set; }

        [JsonProperty("dimensions")]
        public Dimensions Dimensions { get; set; }

        [JsonProperty("site_w_h")]
        public List<long> SiteWH { get; set; }

        [JsonProperty("page_w_h")]
        public List<long> PageWH { get; set; }

        [JsonProperty("site_w_h_small")]
        public List<long> SiteWHSmall { get; set; }

        [JsonProperty("size")]
        public List<long> Size { get; set; }

        [JsonProperty("age_restricted")]
        public bool AgeRestricted { get; set; }

        [JsonProperty("age_restricted_by_admin")]
        public bool AgeRestrictedByAdmin { get; set; }

        [JsonProperty("not_safe_for_work")]
        public bool? NotSafeForWork { get; set; }

        [JsonProperty("allow_reuse")]
        public bool AllowReuse { get; set; }

        [JsonProperty("dont_crop")]
        public bool DontCrop { get; set; }

        [JsonProperty("banned")]
        public bool Banned { get; set; }

        [JsonProperty("global_safe")]
        public bool? GlobalSafe { get; set; }

        [JsonProperty("audio_file_url")]
        public Uri AudioFileUrl { get; set; }

        [JsonProperty("external_download")]
        public ExternalDownloadUnion ExternalDownload { get; set; }

        [JsonProperty("application")]
        public object Application { get; set; }

        [JsonProperty("channel")]
        public Channel Channel { get; set; }

        [JsonProperty("file")]
        public object File { get; set; }

        [JsonProperty("picture")]
        public Uri Picture { get; set; }

        [JsonProperty("timeline_picture")]
        public Uri TimelinePicture { get; set; }

        [JsonProperty("small_picture")]
        public Uri SmallPicture { get; set; }

        [JsonProperty("sharing_picture")]
        public object SharingPicture { get; set; }

        [JsonProperty("percent_done")]
        public long PercentDone { get; set; }

        [JsonProperty("tags")]
        public List<Tag> Tags { get; set; }

        [JsonProperty("categories")]
        public List<Category> Categories { get; set; }

        [JsonProperty("communities")]
        public List<Community> Communities { get; set; }

        [JsonProperty("recoubs_count")]
        public long RecoubsCount { get; set; }

        [JsonProperty("remixes_count")]
        public long RemixesCount { get; set; }

        [JsonProperty("likes_count")]
        public long LikesCount { get; set; }

        [JsonProperty("dislikes_count")]
        public long DislikesCount { get; set; }

        [JsonProperty("raw_video_id")]
        public RawVideoId RawVideoId { get; set; }

        [JsonProperty("uploaded_by_ios_app")]
        public bool UploadedByIosApp { get; set; }

        [JsonProperty("uploaded_by_android_app")]
        public bool UploadedByAndroidApp { get; set; }

        [JsonProperty("media_blocks")]
        public MediaBlocks MediaBlocks { get; set; }

        [JsonProperty("raw_video_thumbnail_url")]
        public string RawVideoThumbnailUrl { get; set; }

        [JsonProperty("raw_video_title")]
        public string RawVideoTitle { get; set; }

        [JsonProperty("video_block_banned")]
        public bool VideoBlockBanned { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("promo_winner")]
        public bool PromoWinner { get; set; }

        [JsonProperty("promo_winner_recoubers")]
        public object PromoWinnerRecoubers { get; set; }

        [JsonProperty("editorial_info")]
        public EditorialInfo EditorialInfo { get; set; }

        [JsonProperty("promo_hint")]
        public object PromoHint { get; set; }

        [JsonProperty("beeline_best_2014")]
        public object BeelineBest2014 { get; set; }

        [JsonProperty("from_web_editor")]
        public bool FromWebEditor { get; set; }

        [JsonProperty("normalize_sound")]
        public bool NormalizeSound { get; set; }

        [JsonProperty("normalize_change_allowed")]
        public bool NormalizeChangeAllowed { get; set; }

        [JsonProperty("best2015_addable")]
        public bool Best2015Addable { get; set; }

        [JsonProperty("ahmad_promo")]
        public object AhmadPromo { get; set; }

        [JsonProperty("promo_data")]
        public object PromoData { get; set; }

        [JsonProperty("audio_copyright_claim")]
        public object AudioCopyrightClaim { get; set; }

        [JsonProperty("ads_disabled")]
        public bool? AdsDisabled { get; set; }

        [JsonProperty("is_safe_for_ads")]
        public bool IsSafeForAds { get; set; }

        [JsonProperty("position_on_page")]
        public long PositionOnPage { get; set; }
    }

    public partial class AudioVersions
    {
        [JsonProperty("template", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Template { get; set; }

        [JsonProperty("versions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Version> Versions { get; set; }

        [JsonProperty("chunks", NullValueHandling = NullValueHandling.Ignore)]
        public Chunks Chunks { get; set; }
    }

    public partial class Chunks
    {
        [JsonProperty("template")]
        public string Template { get; set; }

        [JsonProperty("versions")]
        public List<Version> Versions { get; set; }

        [JsonProperty("chunks")]
        public List<long> ChunksChunks { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("subscriptions_count")]
        public long SubscriptionsCount { get; set; }

        [JsonProperty("big_image_url")]
        public Uri BigImageUrl { get; set; }

        [JsonProperty("small_image_url")]
        public Uri SmallImageUrl { get; set; }

        [JsonProperty("med_image_url")]
        public Uri MedImageUrl { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }
    }

    public partial class Channel
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("followers_count")]
        public long FollowersCount { get; set; }

        [JsonProperty("following_count")]
        public long FollowingCount { get; set; }

        [JsonProperty("avatar_versions")]
        public Versions AvatarVersions { get; set; }
    }

    public partial class Versions
    {
        [JsonProperty("template")]
        public string Template { get; set; }

        [JsonProperty("versions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> VersionsVersions { get; set; }
    }

    public partial class Community
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("subscriptions_count")]
        public long SubscriptionsCount { get; set; }

        [JsonProperty("big_image_url")]
        public Uri BigImageUrl { get; set; }

        [JsonProperty("small_image_url")]
        public Uri SmallImageUrl { get; set; }

        [JsonProperty("med_image_url")]
        public Uri MedImageUrl { get; set; }

        [JsonProperty("i_subscribed")]
        public bool ISubscribed { get; set; }

        [JsonProperty("community_notifications_enabled")]
        public object CommunityNotificationsEnabled { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("description")]
        public string DescriptionDescription { get; set; }

        [JsonProperty("rules")]
        public List<string> Rules { get; set; }

        [JsonProperty("description_html")]
        public string DescriptionHtml { get; set; }

        [JsonProperty("rules_html")]
        public List<string> RulesHtml { get; set; }
    }

    public partial class Dimensions
    {
        [JsonProperty("big")]
        public List<long> Big { get; set; }

        [JsonProperty("med")]
        public List<long> Med { get; set; }
    }

    public partial class EditorialInfo
    {
    }

    public partial class ExternalDownloadClass
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("service_name")]
        public string ServiceName { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("has_embed")]
        public bool HasEmbed { get; set; }
    }

    public partial class FileVersions
    {
        [JsonProperty("html5")]
        public Html5 Html5 { get; set; }

        [JsonProperty("mobile")]
        public Mobile Mobile { get; set; }

        [JsonProperty("share")]
        public Share Share { get; set; }
    }

    public partial class Html5
    {
        [JsonProperty("video")]
        public Video Video { get; set; }

        [JsonProperty("audio")]
        public Audio Audio { get; set; }
    }

    public partial class Audio
    {
        [JsonProperty("high")]
        public High High { get; set; }

        [JsonProperty("med")]
        public High Med { get; set; }

        [JsonProperty("sample_duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? SampleDuration { get; set; }
    }

    public partial class High
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }
    }

    public partial class Video
    {
        [JsonProperty("higher")]
        public High Higher { get; set; }

        [JsonProperty("high")]
        public High High { get; set; }

        [JsonProperty("med")]
        public High Med { get; set; }
    }

    public partial class Mobile
    {
        [JsonProperty("video")]
        public Uri Video { get; set; }

        [JsonProperty("audio")]
        public List<Uri> Audio { get; set; }
    }

    public partial class Share
    {
        [JsonProperty("default")]
        public Uri Default { get; set; }
    }

    public partial class MediaBlocks
    {
        [JsonProperty("uploaded_raw_videos")]
        public List<object> UploadedRawVideos { get; set; }

        [JsonProperty("external_raw_videos")]
        public List<ExternalVideo> ExternalRawVideos { get; set; }

        [JsonProperty("remixed_from_coubs")]
        public List<RemixedFromCoub> RemixedFromCoubs { get; set; }

        [JsonProperty("external_video", NullValueHandling = NullValueHandling.Ignore)]
        public ExternalVideo ExternalVideo { get; set; }
    }

    public partial class ExternalVideo
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("image_retina")]
        public Uri ImageRetina { get; set; }

        [JsonProperty("meta")]
        public ExternalVideoMeta Meta { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("raw_video_id")]
        public long RawVideoId { get; set; }

        [JsonProperty("has_embed")]
        public bool HasEmbed { get; set; }
    }

    public partial class ExternalVideoMeta
    {
        [JsonProperty("service")]
        public string Service { get; set; }

        [JsonProperty("duration")]
        public string Duration { get; set; }
    }

    public partial class RemixedFromCoub
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }

        [JsonProperty("image_retina")]
        public Uri ImageRetina { get; set; }

        [JsonProperty("meta")]
        public RemixedFromCoubMeta Meta { get; set; }

        [JsonProperty("duration")]
        public object Duration { get; set; }

        [JsonProperty("coub_channel_title")]
        public string CoubChannelTitle { get; set; }

        [JsonProperty("coub_channel_permalink")]
        public string CoubChannelPermalink { get; set; }

        [JsonProperty("coub_views_count")]
        public long CoubViewsCount { get; set; }

        [JsonProperty("coub_permalink")]
        public string CoubPermalink { get; set; }
    }

    public partial class RemixedFromCoubMeta
    {
        [JsonProperty("duration")]
        public string Duration { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public enum Version { Low, Mid };

    public enum VisibilityType { Public };

    public enum TypeEnum { CoubSimple };

    public partial struct ExternalDownloadUnion
    {
        public bool? Bool;
        public ExternalDownloadClass ExternalDownloadClass;

        public static implicit operator ExternalDownloadUnion(bool Bool) => new ExternalDownloadUnion { Bool = Bool };
        public static implicit operator ExternalDownloadUnion(ExternalDownloadClass ExternalDownloadClass) => new ExternalDownloadUnion { ExternalDownloadClass = ExternalDownloadClass };
    }

    public partial struct RawVideoId
    {
        public long? Integer;
        public string String;

        public static implicit operator RawVideoId(long Integer) => new RawVideoId { Integer = Integer };
        public static implicit operator RawVideoId(string String) => new RawVideoId { String = String };
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VersionConverter.Singleton,
                ExternalDownloadUnionConverter.Singleton,
                VisibilityTypeConverter.Singleton,
                RawVideoIdConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VersionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Version) || t == typeof(Version?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "low":
                    return Version.Low;
                case "mid":
                    return Version.Mid;
            }
            throw new Exception("Cannot unmarshal type Version");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Version)untypedValue;
            switch (value)
            {
                case Version.Low:
                    serializer.Serialize(writer, "low");
                    return;
                case Version.Mid:
                    serializer.Serialize(writer, "mid");
                    return;
            }
            throw new Exception("Cannot marshal type Version");
        }

        public static readonly VersionConverter Singleton = new VersionConverter();
    }

    internal class ExternalDownloadUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExternalDownloadUnion) || t == typeof(ExternalDownloadUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new ExternalDownloadUnion { Bool = boolValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ExternalDownloadClass>(reader);
                    return new ExternalDownloadUnion { ExternalDownloadClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ExternalDownloadUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ExternalDownloadUnion)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.ExternalDownloadClass != null)
            {
                serializer.Serialize(writer, value.ExternalDownloadClass);
                return;
            }
            throw new Exception("Cannot marshal type ExternalDownloadUnion");
        }

        public static readonly ExternalDownloadUnionConverter Singleton = new ExternalDownloadUnionConverter();
    }

    internal class VisibilityTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VisibilityType) || t == typeof(VisibilityType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "public")
            {
                return VisibilityType.Public;
            }
            throw new Exception("Cannot unmarshal type VisibilityType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VisibilityType)untypedValue;
            if (value == VisibilityType.Public)
            {
                serializer.Serialize(writer, "public");
                return;
            }
            throw new Exception("Cannot marshal type VisibilityType");
        }

        public static readonly VisibilityTypeConverter Singleton = new VisibilityTypeConverter();
    }

    internal class RawVideoIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RawVideoId) || t == typeof(RawVideoId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new RawVideoId { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new RawVideoId { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type RawVideoId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (RawVideoId)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type RawVideoId");
        }

        public static readonly RawVideoIdConverter Singleton = new RawVideoIdConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Coub::Simple")
            {
                return TypeEnum.CoubSimple;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.CoubSimple)
            {
                serializer.Serialize(writer, "Coub::Simple");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
